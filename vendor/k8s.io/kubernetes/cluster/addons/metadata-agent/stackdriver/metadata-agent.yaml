apiVersion: v1
kind: ServiceAccount
metadata:
  name: metadata-agent
  namespace: kube-system
  labels:
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: metadata-agent-config
  namespace: kube-system
  labels:
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
data:
  node_level.conf: |-
    KubernetesUseWatch: true
    KubernetesClusterLevelMetadata: false
  cluster_level.conf: |-
    KubernetesUseWatch: true
    KubernetesClusterLevelMetadata: true
---
kind: DaemonSet
apiVersion: extensions/v1beta1
metadata:
  labels:
    app: metadata-agent
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
  name: metadata-agent
  namespace: kube-system
spec:
  selector:
    matchLabels:
      app: metadata-agent
  template:
    metadata:
      labels:
        app: metadata-agent
      annotations:
        seccomp.security.alpha.kubernetes.io/pod: 'docker/default'
    spec:
      serviceAccountName: metadata-agent
      containers:
      - image: gcr.io/stackdriver-agents/stackdriver-metadata-agent:0.2-0.0.19-1
        imagePullPolicy: IfNotPresent
        name: metadata-agent
        livenessProbe:
          exec:
            command:
              - /bin/bash
              - -c
              - |
                if [[ -f /var/run/metadata-agent/health/unhealthy ]]; then
                  exit 1;
                fi
          periodSeconds: 10
          failureThreshold: 1
          successThreshold: 1
        volumeMounts:
          - name: metadata-agent-config-volume
            mountPath: /etc/config
        command:
          - /opt/stackdriver/metadata/sbin/metadatad
          - --config-file=/etc/config/node_level.conf
        ports:
        - containerPort: 8000
          hostPort: 8799
          protocol: TCP
        resources:
          requests:
            cpu: {{ metadata_agent_cpu_request }}
            memory: {{ metadata_agent_memory_request }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 30
      volumes:
        - name: metadata-agent-config-volume
          configMap:
            name: metadata-agent-config
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
---
kind: Deployment
apiVersion: apps/v1beta1
metadata:
  labels:
    app: metadata-agent-cluster-level
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
  name: metadata-agent-cluster-level
  namespace: kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: metadata-agent-cluster-level
  template:
    metadata:
      labels:
        app: metadata-agent-cluster-level
      annotations:
        seccomp.security.alpha.kubernetes.io/pod: 'docker/default'
    spec:
      serviceAccountName: metadata-agent
      containers:
      - image: gcr.io/stackdriver-agents/stackdriver-metadata-agent:0.2-0.0.19-1
        imagePullPolicy: IfNotPresent
        name: metadata-agent
        livenessProbe:
          exec:
            command:
              - /bin/bash
              - -c
              - |
                if [[ -f /var/run/metadata-agent/health/unhealthy ]]; then
                  exit 1;
                fi
          periodSeconds: 10
          failureThreshold: 1
          successThreshold: 1
        volumeMounts:
          - name: metadata-agent-config-volume
            mountPath: /etc/config
        command:
          - /opt/stackdriver/metadata/sbin/metadatad
          - --config-file=/etc/config/cluster_level.conf
        ports:
        - containerPort: 8000
          protocol: TCP
        resources:
          requests:
            cpu: {{ metadata_agent_cluster_level_cpu_request }}
            memory: {{ metadata_agent_cluster_level_memory_request }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 30
      volumes:
        - name: metadata-agent-config-volume
          configMap:
            name: metadata-agent-config
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
